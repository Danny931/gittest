"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteDecimalPart = exports.formatDecimalPart = exports.formatIntegerPart = exports.parseDecimal = exports.bnDivWithDecimalNumber = exports.bnMulWithDecimalNumber = exports.floor = exports.ceil = exports.round = exports.div = exports.mul = exports.sub = exports.add = exports.formatPercentage = exports.convertUSD = exports.formatDecimal = exports.formatDecimalWithSeparation = void 0;
var units_1 = require("@ethersproject/units");
var math = require("mathjs");
/* eslint-disable */
var zeroRegx = /^0*$/;
/**
 * 去除value小数点后 的字符串
 * @param {string} value 要处理的字符串
 * @returns {string} value去除小数点后的字符串
 * @example ("1000000.000000") => "1000000"
 * @example ("1000000.5678901231212") => "1000000"
 */
function deleteDecimalPart(value) {
    return "".concat(value.split('.')[0]);
}
exports.deleteDecimalPart = deleteDecimalPart;
/**
 * 去除小数部分末尾的0
 * @param value
 * @returns
 */
function deleteLastzero(value) {
    var integerPart = value.split('.')[0];
    var decimalPart = value.split('.')[1];
    if (decimalPart === undefined) {
        return integerPart;
    }
    while (decimalPart.length > 0 && decimalPart[decimalPart.length - 1] === '0') {
        decimalPart = decimalPart.substr(0, decimalPart.length - 1);
    }
    if (decimalPart.length > 0) {
        return integerPart + '.' + decimalPart;
    }
    return integerPart;
}
/**
 * 去除小数点，然后返回处理过decimal之后的string
 * @param amount
 * @param decimalCount
 * @returns
 * @example ("1000000000000000000.000000000000") => "1.0"
 * @example ("1000000000000000000.000000000000", 18) => "1.0"
 * @example ("1000000000000000000.000000000000", 6) => "1000000000000.0"
 */
function formatUnitsWithDeleteDecimalPart(amount, decimalCount) {
    if (decimalCount === void 0) { decimalCount = 18; }
    if (typeof amount === 'string') {
        amount = deleteDecimalPart(amount);
    }
    return (0, units_1.formatUnits)(amount || 0, decimalCount);
}
/**
 * 处理小数部分
 * @param amount
 * @param keepDecimals
 * @param formatType
 * @param {boolean} isDeleteLastzero 是否删除小数点后末尾的0，默认为false
 * @returns
 * @example ("0.3200564500000") => "0.320056"
 * @example ("0.3200564500000", 6) => "0.320056"
 * @example ("0.3200564500000", 2) => "0.32"
 * @example ("0.3200568500000", 6) => "0.320056"
 * @example ("0.3200568500000", 6, "round") => "0.320057"
 * @example ("0.3200568500000", 2, "round") => "0.32"
 * @example ("0.3250568500000", 2, "round") => "0.33"
 */
function formatDecimalPart(amount, keepDecimals, formatType, isDeleteLastzero) {
    if (keepDecimals === void 0) { keepDecimals = 6; }
    if (formatType === void 0) { formatType = 'floor'; }
    if (isDeleteLastzero === void 0) { isDeleteLastzero = false; }
    var _a = amount.split('.'), integerPart = _a[0], decimalPart = _a[1];
    // 如果小数点后为空，则直接返回整数部分
    if (!decimalPart) {
        return integerPart;
    }
    var keptDecimals = decimalPart;
    var result = '';
    if (formatType === 'floor') {
        if (decimalPart.length < keepDecimals) {
            for (var i = decimalPart.length; i < keepDecimals; i++) {
                keptDecimals += '0';
            }
        }
        else if (decimalPart.length > keepDecimals) {
            var keptDecimalsArr = decimalPart.slice(0, keepDecimals + 1).split('');
            keptDecimals = keptDecimalsArr.slice(0, keepDecimals).join('');
        }
        if (zeroRegx.test(keptDecimals)) {
            result = integerPart;
        }
        else {
            result = integerPart + '.' + keptDecimals;
        }
    }
    else if (formatType === 'round') {
        // 将amount转换为number类型进行取值处理
        var amountNum = Number(amount);
        var amountStr = round(amountNum, keepDecimals);
        if (!decimalPart || zeroRegx.test(keptDecimals)) {
            result = integerPart;
        }
        else {
            result = amountStr;
        }
    }
    else {
        // 将amount转换为number类型进行取值处理
        var amountNum = Number(amount);
        var amountStr = ceil(amountNum, keepDecimals);
        if (!decimalPart || zeroRegx.test(keptDecimals)) {
            result = integerPart;
        }
        else {
            result = amountStr;
        }
    }
    return isDeleteLastzero ? deleteLastzero(result) : result;
}
exports.formatDecimalPart = formatDecimalPart;
/**
 * 处理整数部分
 * @param amount
 * @param separation 要插入的sep，默认为",""
 * @returns
 * @example ("100000000") => "100,000,000"
 * @example ("100") => "100"
 * @example ("1000") => "1,000"
 * @example ("100000000.123456789") => "100,000,000.123456789"
 * @example ("100.123456789") => "100.123456789"
 * @example ("1000.123456789") => "1,000.123456789"
 * @example ("1000", "/") => "1/000"
 * @example ("1000.123456789", "/") => "1/000.123456789"
 */
function formatIntegerPart(amount, separation) {
    if (separation === void 0) { separation = ','; }
    var _a = amount.split('.'), integerPart = _a[0], decimalPart = _a[1];
    var chunkSize = 3;
    var result = [];
    // 每3位分割
    for (var i = 0; i < integerPart.length; i += chunkSize) {
        var end = integerPart.length - i;
        var start = end - chunkSize;
        result.unshift(integerPart.substring(start, end));
    }
    // 整数部分每隔3位插入指定符号sep
    var resultIntPart = result.join(separation);
    if (decimalPart) {
        return resultIntPart + '.' + decimalPart;
    }
    return resultIntPart;
}
exports.formatIntegerPart = formatIntegerPart;
/**
 * 把string或number类型的数值格式化，默认保留小数点后6位
 * @param {string | number} balance
 * @param {number} keepDecimals 要保留小数点后的位数，默认为6
 * @param formatType 取整方式
 * @param {string} separation 要插入的sep，默认为",""
 * @param {boolean} isDeleteLastzero 是否删除小数点后末尾的0，默认为false
 * @returns
 * @example ("3000000000.000000000000") => "3,000,000,000"
 * @example ("3000000000.000000000000", 2) => "3,000,000,000"
 * @example "(3000000000.400000000000") => "3,000,000,000.400000"
 * @example "(3000000000.400000000000", 2) => "3,000,000,000.40"
 */
function formatBalance(amount, keepDecimals, formatType, separation, isDeleteLastzero) {
    if (keepDecimals === void 0) { keepDecimals = 6; }
    if (formatType === void 0) { formatType = 'floor'; }
    if (separation === void 0) { separation = ','; }
    if (isDeleteLastzero === void 0) { isDeleteLastzero = false; }
    return formatIntegerPart(formatDecimalPart(String(amount), keepDecimals, formatType, isDeleteLastzero), separation);
}
/**
 * 将BigNumber转换为处理过decimal之后的string，用于计算与传值
 * @param amount
 * @param decimalCount
 * @returns
 * @example ("100000000000000000000000.00000000000") => "100000"
 * @example ("100000400000000000000000.00000000000") => "100000.400000"
 * @example ("100000000000000000000000.00000000000", 2) => "100000"
 * @example ("100000400000000000000000.00000000000", 2) => "100000.40"
 * @example ("100000000000000000000000.00000000000", 6, 6) => "100000000000000000"
 */
function formatDecimal(amount, keepDecimals, decimalCount, formatType, isDeleteLastzero) {
    if (keepDecimals === void 0) { keepDecimals = 6; }
    if (decimalCount === void 0) { decimalCount = 18; }
    if (formatType === void 0) { formatType = 'floor'; }
    if (isDeleteLastzero === void 0) { isDeleteLastzero = false; }
    return formatDecimalPart(formatUnitsWithDeleteDecimalPart(amount, decimalCount), keepDecimals, formatType, isDeleteLastzero);
}
exports.formatDecimal = formatDecimal;
/**
 * 先将BigNumber转换为处理过decimal之后的string，再特殊处理整数部分和小数部分，用于UI展示
 * @param amount 需要处理的大数
 * @param keepDecimals 保留小数点后几位
 * @param decimalCount decimal长度
 * @param formatType 取整方式
 * @param separation 分隔符
 * @param {boolean} isDeleteLastzero 是否删除小数点后末尾的0，默认为false
 * @returns
 * @example ("100000000000000000000000.00000000000") => "100,000"
 * @example ("100000500500000000000000.00000000000") => "100,000.500500"
 * @example ("100000500500000000000000.00000000000", 2) => "100,000.50"
 */
function formatDecimalWithSeparation(amount, keepDecimals, decimalCount, formatType, separation, isDeleteLastzero) {
    if (keepDecimals === void 0) { keepDecimals = 6; }
    if (decimalCount === void 0) { decimalCount = 18; }
    if (formatType === void 0) { formatType = 'floor'; }
    if (separation === void 0) { separation = ','; }
    if (isDeleteLastzero === void 0) { isDeleteLastzero = false; }
    return formatBalance(formatUnitsWithDeleteDecimalPart(amount, decimalCount), keepDecimals, formatType, separation, isDeleteLastzero);
}
exports.formatDecimalWithSeparation = formatDecimalWithSeparation;
/**
 * 转换货币, 这里选择了向下取整
 * @param num 货币数值
 * @param symbol 货币单位
 * @param formatType 取整方式
 * @param keepDecimals 保留小数点后几位，默认为2位
 * @returns
 * @example ("10000.20", "$") => "$10,000.20"
 * @example ("10000.248", "¥") => "¥10,000.24"
 */
function convertMula(num, symbol, formatType, keepDecimals) {
    if (formatType === void 0) { formatType = 'floor'; }
    if (keepDecimals === void 0) { keepDecimals = 2; }
    if (num === undefined || num === null) {
        return symbol + '0.00';
    }
    var formattedNum = formatBalance(num, keepDecimals, formatType, ',');
    return symbol + formattedNum;
}
/**
 * 美元转换, 这里选择了向下取整
 * @param num 美元数值
 * @param formatType 取整方式
 * @param keepDecimals 保留小数点后几位, 默认为2位
 * @returns
 * @example ("10000.20") => "$10,000.20"
 * @example (10000.245) => "$10,000.24"
 */
function convertUSD(num, formatType, keepDecimals) {
    if (formatType === void 0) { formatType = 'floor'; }
    if (keepDecimals === void 0) { keepDecimals = 2; }
    return convertMula(num, '$', formatType, keepDecimals);
}
exports.convertUSD = convertUSD;
/**
 * 百分比转换
 * @param num 需要转换的数值
 * @param isAlreadyPercent 是否已经乘以过100
 * @returns
 * @example () => "0.00%"
 * @example (0.235) => "24.00%"
 * @example (0.235, true) => "0.24%"
 */
function formatPercentage(num, isAlreadyPercent) {
    if (isAlreadyPercent === void 0) { isAlreadyPercent = false; }
    if (!num) {
        return '0.00%';
    }
    if (isAlreadyPercent) {
        return round(num, 2) + '%';
    }
    return round(num * 100, 2) + '%';
}
exports.formatPercentage = formatPercentage;
function add(num1, num2) {
    return Number(math.add(math.bignumber(num1), math.bignumber(num2)));
}
exports.add = add;
function sub(num1, num2) {
    return Number(math.subtract(math.bignumber(num1), math.bignumber(num2)));
}
exports.sub = sub;
function mul(num1, num2) {
    return Number(math.multiply(math.bignumber(num1), math.bignumber(num2)));
}
exports.mul = mul;
function div(num1, num2) {
    return Number(math.divide(math.bignumber(num1), math.bignumber(num2)));
}
exports.div = div;
/**
 * likes number.toFixed(), but this is right
 * @param num
 * @param d
 * @returns
 * @example round(0.235, 2) => "0.24"
 */
function round(num, d) {
    return (Math.round(num * Math.pow(10, d)) / Math.pow(10, d)).toFixed(d);
}
exports.round = round;
/**
 * 向上取整，保留指定位数
 * @param num
 * @param d
 * @returns
 * @example round(0.231, 2) => "0.24"
 * @example round(0.2301, 2) => "0.24"
 */
function ceil(num, d) {
    return (Math.ceil(num * Math.pow(10, d)) / Math.pow(10, d)).toFixed(d);
}
exports.ceil = ceil;
/**
 * 向下取整，保留指定位数
 * @param num
 * @param d
 * @returns
 * @example round(0.231, 2) => "0.23"
 * @example round(0.2399, 2) => "0.23"
 */
function floor(num, d) {
    if (!num) {
        return (0).toFixed(d);
    }
    var _a = String(num).split('.'), integerPart = _a[0], decimalPart = _a[1];
    return integerPart + '.' + decimalPart.slice(0, d);
}
exports.floor = floor;
/**
 * bigNumebr mul with DecimalNumber
 * @param bn
 * @param decimalNumber
 * @returns
 * @example (1000000000000000000, 0.3) => BigNumber.from(300000000000000000)
 */
function bnMulWithDecimalNumber(bn, decimalNumber) {
    var decimalStr = String(decimalNumber);
    var _a = decimalStr.split('.'), decimalPart = _a[1];
    if (!decimalPart) {
        return bn.mul(decimalNumber).toString();
    }
    else {
        var decimalPartLength = decimalPart.length;
        return bn
            .mul(mul(decimalNumber, Math.pow(10, decimalPartLength)))
            .div(Math.pow(10, decimalPartLength))
            .toString();
    }
}
exports.bnMulWithDecimalNumber = bnMulWithDecimalNumber;
/**
 * bigNumebr div with DecimalNumber
 * @param bn
 * @param decimalNumber
 * @returns
 * @example (1000000000000000000, 0.1) => BigNumber.from(10000000000000000000).toString()
 */
function bnDivWithDecimalNumber(bn, decimalNumber) {
    var decimalStr = String(decimalNumber);
    var _a = decimalStr.split('.'), decimalPart = _a[1];
    if (!decimalPart) {
        return bn.div(decimalNumber).toString();
    }
    else {
        var decimalPartLength = decimalPart.length;
        return bn
            .div(mul(decimalNumber, Math.pow(10, decimalPartLength)))
            .mul(Math.pow(10, decimalPartLength))
            .toString();
    }
}
exports.bnDivWithDecimalNumber = bnDivWithDecimalNumber;
function parseDecimal(amount, keepDecimals, formatType) {
    if (formatType === void 0) { formatType = 'floor'; }
    var newAmount;
    switch (formatType) {
        case 'floor':
            newAmount = floor(Number(amount), keepDecimals);
            break;
        case 'round':
            newAmount = round(Number(amount), keepDecimals);
            break;
        case 'ceil':
            newAmount = ceil(Number(amount), keepDecimals);
            break;
    }
    return (0, units_1.parseUnits)(newAmount, keepDecimals).toString();
}
exports.parseDecimal = parseDecimal;
